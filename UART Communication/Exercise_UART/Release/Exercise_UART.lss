
Exercise_UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000016c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000050  00800060  0000016c  000001e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e6       	ldi	r30, 0x6C	; 108
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 3b       	cpi	r26, 0xB0	; 176
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 73 00 	call	0xe6	; 0xe6 <main>
  7a:	0c 94 b4 00 	jmp	0x168	; 0x168 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <UART_Init>:
  82:	9b 01       	movw	r18, r22
  84:	ac 01       	movw	r20, r24
  86:	88 e1       	ldi	r24, 0x18	; 24
  88:	8a b9       	out	0x0a, r24	; 10
  8a:	86 e8       	ldi	r24, 0x86	; 134
  8c:	80 bd       	out	0x20, r24	; 32
  8e:	84 e0       	ldi	r24, 0x04	; 4
  90:	22 0f       	add	r18, r18
  92:	33 1f       	adc	r19, r19
  94:	44 1f       	adc	r20, r20
  96:	55 1f       	adc	r21, r21
  98:	8a 95       	dec	r24
  9a:	d1 f7       	brne	.-12     	; 0x90 <UART_Init+0xe>
  9c:	60 e0       	ldi	r22, 0x00	; 0
  9e:	72 e1       	ldi	r23, 0x12	; 18
  a0:	8a e7       	ldi	r24, 0x7A	; 122
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	0e 94 92 00 	call	0x124	; 0x124 <__udivmodsi4>
  a8:	21 50       	subi	r18, 0x01	; 1
  aa:	29 b9       	out	0x09, r18	; 9
  ac:	08 95       	ret

000000ae <UART_Send_Byte>:
  ae:	8c b9       	out	0x0c, r24	; 12
  b0:	5e 9b       	sbis	0x0b, 6	; 11
  b2:	fe cf       	rjmp	.-4      	; 0xb0 <UART_Send_Byte+0x2>
  b4:	5e 9a       	sbi	0x0b, 6	; 11
  b6:	08 95       	ret

000000b8 <UART_Send_String>:
  b8:	fc 01       	movw	r30, r24
  ba:	05 c0       	rjmp	.+10     	; 0xc6 <UART_Send_String+0xe>
  bc:	8c b9       	out	0x0c, r24	; 12
  be:	5e 9b       	sbis	0x0b, 6	; 11
  c0:	fe cf       	rjmp	.-4      	; 0xbe <UART_Send_String+0x6>
  c2:	5e 9a       	sbi	0x0b, 6	; 11
  c4:	31 96       	adiw	r30, 0x01	; 1
  c6:	80 81       	ld	r24, Z
  c8:	88 23       	and	r24, r24
  ca:	c1 f7       	brne	.-16     	; 0xbc <UART_Send_String+0x4>
  cc:	08 95       	ret

000000ce <UART_Recieve_Byte>:
  ce:	5f 9b       	sbis	0x0b, 7	; 11
  d0:	fe cf       	rjmp	.-4      	; 0xce <UART_Recieve_Byte>
  d2:	8c b1       	in	r24, 0x0c	; 12
  d4:	08 95       	ret

000000d6 <UART_Recieve_String>:
  d6:	fc 01       	movw	r30, r24
  d8:	5f 9b       	sbis	0x0b, 7	; 11
  da:	fe cf       	rjmp	.-4      	; 0xd8 <UART_Recieve_String+0x2>
  dc:	8c b1       	in	r24, 0x0c	; 12
  de:	81 93       	st	Z+, r24
  e0:	88 23       	and	r24, r24
  e2:	d1 f7       	brne	.-12     	; 0xd8 <UART_Recieve_String+0x2>
  e4:	08 95       	ret

000000e6 <main>:
  e6:	60 e8       	ldi	r22, 0x80	; 128
  e8:	75 e2       	ldi	r23, 0x25	; 37
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 41 00 	call	0x82	; 0x82 <UART_Init>
  f2:	80 e6       	ldi	r24, 0x60	; 96
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 5c 00 	call	0xb8	; 0xb8 <UART_Send_String>
  fa:	80 e2       	ldi	r24, 0x20	; 32
  fc:	81 bb       	out	0x11, r24	; 17
  fe:	0e 94 67 00 	call	0xce	; 0xce <UART_Recieve_Byte>
 102:	8e 36       	cpi	r24, 0x6E	; 110
 104:	31 f0       	breq	.+12     	; 0x112 <main+0x2c>
 106:	89 37       	cpi	r24, 0x79	; 121
 108:	41 f4       	brne	.+16     	; 0x11a <main+0x34>
 10a:	95 9a       	sbi	0x12, 5	; 18
 10c:	81 e8       	ldi	r24, 0x81	; 129
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	06 c0       	rjmp	.+12     	; 0x11e <main+0x38>
 112:	95 98       	cbi	0x12, 5	; 18
 114:	80 e9       	ldi	r24, 0x90	; 144
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	02 c0       	rjmp	.+4      	; 0x11e <main+0x38>
 11a:	80 ea       	ldi	r24, 0xA0	; 160
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 5c 00 	call	0xb8	; 0xb8 <UART_Send_String>
 122:	ed cf       	rjmp	.-38     	; 0xfe <main+0x18>

00000124 <__udivmodsi4>:
 124:	a1 e2       	ldi	r26, 0x21	; 33
 126:	1a 2e       	mov	r1, r26
 128:	aa 1b       	sub	r26, r26
 12a:	bb 1b       	sub	r27, r27
 12c:	fd 01       	movw	r30, r26
 12e:	0d c0       	rjmp	.+26     	; 0x14a <__udivmodsi4_ep>

00000130 <__udivmodsi4_loop>:
 130:	aa 1f       	adc	r26, r26
 132:	bb 1f       	adc	r27, r27
 134:	ee 1f       	adc	r30, r30
 136:	ff 1f       	adc	r31, r31
 138:	a2 17       	cp	r26, r18
 13a:	b3 07       	cpc	r27, r19
 13c:	e4 07       	cpc	r30, r20
 13e:	f5 07       	cpc	r31, r21
 140:	20 f0       	brcs	.+8      	; 0x14a <__udivmodsi4_ep>
 142:	a2 1b       	sub	r26, r18
 144:	b3 0b       	sbc	r27, r19
 146:	e4 0b       	sbc	r30, r20
 148:	f5 0b       	sbc	r31, r21

0000014a <__udivmodsi4_ep>:
 14a:	66 1f       	adc	r22, r22
 14c:	77 1f       	adc	r23, r23
 14e:	88 1f       	adc	r24, r24
 150:	99 1f       	adc	r25, r25
 152:	1a 94       	dec	r1
 154:	69 f7       	brne	.-38     	; 0x130 <__udivmodsi4_loop>
 156:	60 95       	com	r22
 158:	70 95       	com	r23
 15a:	80 95       	com	r24
 15c:	90 95       	com	r25
 15e:	9b 01       	movw	r18, r22
 160:	ac 01       	movw	r20, r24
 162:	bd 01       	movw	r22, r26
 164:	cf 01       	movw	r24, r30
 166:	08 95       	ret

00000168 <_exit>:
 168:	f8 94       	cli

0000016a <__stop_program>:
 16a:	ff cf       	rjmp	.-2      	; 0x16a <__stop_program>
